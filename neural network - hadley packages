
#Load packages
               library(caret) #Classification and Regression Training 

               library(dplyr)
               library(data.table) #Extension of data.frame
               library(ggplot2)
               library(forecast)
               library(lubridate)
               library(magrittr)
               library(purrr)
               library(tidyr)
               library(fpp2)



#Set up working directory
setwd("c:/Users/DellPC/Desktop/demand-forecasting-kernels-only")

"Read file"

train<- read.csv("train.csv")
test<-read.csv("test.csv")
sample<-read.csv("sample.csv")

#Creating variable sale in test
test$sales <-NA
test$id <- NULL

train<-train %>% rbind(test)

#Transforming date format

train$date %>% lubridate::ymd()
test$date %>% lubridate::ymd()

#Creating variable year, weekdays and month by date 

train<- train %>% mutate(year=as.numeric(lubridate::year(date)),weekdays = as.numeric(lubridate::wday(date,abbr=TRUE,label=TRUE)), month = as.numeric(lubridate::month(date)))

# Creating variables as weekly and monthly sales

train<- train %>% group_by(store,item,weekdays)%>% mutate(sales_week = mean(sales, na.rm = TRUE))%>%ungroup()%>% group_by(store,item,month)%>% mutate(sales_month=mean(sales,na.rm = TRUE))%>%ungroup()

#Replacing sales equals 0 to 1. Not disturb modeling

train<- train %>% mutate(sales=ifelse(sales==0,1,sales))

#We want to repeat an action for each store and item.
#To do that, we need a new data structure: the nested data frame. 

by_train <- train %>% group_by(store,item)%>% nest()

#Model-fitting functiton. Hadley knows

train_model<- function (train){
               
               ts_train2<- ts(train %>% dplyr::filter(year<2018)%>% dplyr::select(sales))
               
                              xtrain2<- train %>% 
               dplyr::filter(year < 2018)%>% dplyr::select(year, weekdays, month, sales_week,sales_month)%>%ts()

                              xtest2 <- train %>% 
               dplyr::filter(year == 2018)%>% dplyr::select(year,weekdays, month, sales_week, sales_month) %>% ts()

#Neural  Network Fitting
                              nnxreg_fit2 <- nnetar(ts_train2, xreg=xtrain2, 
               lambda = 0, #Forecasts will stay positive 
               decay=0, #weight decay
               maxit=100) #number of iterations

                              forecast(nnxreg_fit2,xreg=xtest2,h=90)%>% 
               data.frame()%>%mutate(sales=Point.Forecast)%>%dplyr::select(sales)

                           }

"Finish the function"
#We're going to create a new variable in the by_train data frame

               models_nnetar<- by_train %>% mutate(mod=purrr::map(data,train_model))
                                    
#Prediction
                              prediction_nnetar<- tidyr::unnest(models_nnetar,mod)%>% mutate(id=sample$id)%>%
               dplyr::select(id,sales)

#Saving output

               prediction_nnetar%>% data.table::fwrite("nnetar_model.csv")
                                        
                                        



